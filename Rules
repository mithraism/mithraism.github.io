#!/usr/bin/env ruby

### Preprocessing rules ######################################################

preprocess do

  def hide_assets
    items.each do |item|
      if item.identifier =~ /^\/assets/
        item[:is_hidden] = true
      end
    end
  end

  def generate_quick_reviews
    groups = items.glob('/reviews.*')[0][:quick_reviews]
    groups.each_pair do |subtype, quick_reviews|
      quick_reviews.each_pair do |title, rating|
        attributes = {
          :title   => title.to_s,
          :subtype => subtype.to_s,
          :rating  => rating,
          :quick   => true,
          :partial => true
        }
        identifier = "/reviews/#{title.to_s.downcase.gsub(/[^a-z]+/, '-')}.md"
        items << Nanoc::Item.new('', attributes, identifier)
      end
    end
  end

  def delete_drafts
    items.delete_if { |i| i[:is_draft] }
  end

  def convert_dates
    items.each do |i|
      if i[:published_on]
        i[:published_on] = Date.parse(i[:published_on])
      end
    end
  end

  hide_assets
  generate_quick_reviews
  delete_drafts
  convert_dates

end

compile '*', :rep => :raw do
end

### Compilation rules ########################################################

compile '/assets/style/*.css' do
  filter :sass, :syntax => :scss, :style => :compressed
  filter :relativize_paths, :type => :css
end

compile '/sitemap_xml.*' do
  filter :erb
end

compile '/404.*' do
  filter :erb
end

compile '/assets/*' do
end

compile '*' do
  next if item[:partial]

  if item[:markdown]
    filter :rdiscount
  else
    filter :erb
  end

  if item[:has_code]
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
  end

  case @item[:kind]
  when 'review'
    layout '/review.erb'
  else
    layout '/page.erb'
  end
  layout '/default.erb'

  filter :rubypants
  filter :relativize_paths, :type => :html
end

### Routing rules ############################################################

route '/404.*' do
  '/error/404.php'
end

route '/sitemap_xml.*' do
  '/sitemap.xml'
end

route '/assets/*' do
  version_part = item[:version] ? '-v' + item[:version].to_s : ''
  item.identifier.without_ext + version_part + '.' + item.identifier.extension
end

route '*', :rep => :raw do
  if item[:partial] || item.binary?
    nil
  else
    item.identifier.with_ext('txt')
  end
end

route '*' do
  if item[:partial]
    nil
  elsif item.identifier.match?('/index.*')
    '/index.html'
  else
    item.identifier.in_dir.with_ext('html')
  end
end

### Layouting rules ##########################################################

layout '*', :erb
